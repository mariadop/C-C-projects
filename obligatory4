// obligatory4.cpp : Ten plik zawiera funkcję „main”. W nim rozpoczyna się i kończy wykonywanie programu.
//
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdlib>
#include <cstring>

struct Ball {
	int y;
	int x;
	int speedX;
	int speedY;
	int isActive;
};

int main() {
	int n, i, posY, posX, mode;
	int y1, y2, x1, x2;
	int dy, dx;
	struct Ball* balls = NULL;

	while (1) {
		char *command;
		command = (char*)malloc(125 * sizeof(char));
		if (command == NULL) {
			printf("Memory allocation failed\n");
			return 1;
		}
		//char command[125];
		scanf("%s", command);
		if (strcmp(command, "INIT") == 0) {

			if (balls != NULL) {
				free(balls);
				balls = NULL;
			}
			scanf("%d", &n);
			balls = (struct Ball*)malloc(n * sizeof(struct Ball));
			for (int j = 0; j < n; j++) {
				balls[j].isActive = 0;
			}
			if (balls == NULL) {
				printf("Memory allocation failed!\n");
				return 1;
			}

		}

		else if (strcmp(command, "SET") == 0) {
			scanf("%d %d %d", &i, &posY, &posX);

			balls[i].y = posY;
			balls[i].x = posX;
			balls[i].speedY = 0;
			balls[i].speedX = 0;
			balls[i].isActive = 1;
			
		}

		else if (strcmp(command, "CHANGE") == 0) {
			scanf("%d %d %d", &i, &dy, &dx);

			if (balls[i].isActive) {
				balls[i].speedY += dy;
				balls[i].speedX += dx;
			}
		}

		else if (strcmp(command, "PASS") == 0) {
			
			for (int j = 0; j < n; j++) {
				if (balls[j].isActive == 1) {
					balls[j].y += balls[j].speedY;
					balls[j].x += balls[j].speedX;
				}
			}

			for (int j = 0; j < n; j++) {
				if (balls[j].isActive == 1) {
					for (int m = j + 1; m < n; m++) {
						if (balls[m].isActive == 1) {
							if (balls[j].y == balls[m].y && balls[m].x == balls[j].x) {
								balls[j].speedY = 0;
								balls[j].speedX = 0;
								balls[m].speedY = 0;
								balls[m].speedX = 0;
							}
						}
					}
				}
			}
		}

		else if (strcmp(command, "PRINT") == 0) {
			scanf("%d", &mode);

			if (mode == 0) {
				for (int j = 0; j < n; j++) {
					if (balls[j].isActive) {
						printf("%d : py=%s%d px=%s%d sy=%s%d sx=%s%d\n",
							j,
							(balls[j].y >= 0 && balls[j].y < 10) ? "  " : (balls[j].y > -10 ? " " : ""), balls[j].y,
							(balls[j].x >= 0 && balls[j].x < 10) ? "  " : (balls[j].x > -10 ? " " : ""), balls[j].x,
							(balls[j].speedY >= 0 && balls[j].speedY < 10) ? "  " : (balls[j].speedY > -10 ? " " : ""), balls[j].speedY,
							(balls[j].speedX >= 0 && balls[j].speedX < 10) ? "  " : (balls[j].speedX > -10 ? " " : ""), balls[j].speedX);
					}
				}
			}

			else if (mode == 1) {
				scanf("%d %d %d %d", &y1, &x1, &y2, &x2);

				int rows = y2 - y1 + 1;
				int columns = x2 - x1 + 1;

				for (int r = 0; r < rows; r++) {
					for (int c = 0; c < columns; c++) {
						int found = 0;
						for (int j = 0; j < n; j++) {
							if (balls[j].isActive &&
								balls[j].y == y1 + r &&
								balls[j].x == x1 + c) {
								printf("*");
								found = 1;
								break;
							}
						}
						if (!found) {
							printf(".");
						}
					}
					printf("\n");
				}
				printf("\n");
			}
			printf("\n");

		}

		else if (strcmp(command, "END") == 0) {
			break;
		}
		free(command);
	}	
}
