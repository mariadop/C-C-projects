// lab8help.cpp : Ten plik zawiera funkcję „main”. W nim rozpoczyna się i kończy wykonywanie programu.
//

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdlib>
#include <cstring>


typedef struct {
    int** sequences;
    int* sizes;
    int n;
} SequenceData;

void freeData(SequenceData* data) {
    for (int i = 0; i < data->n; i++) {
        free(data->sequences[i]);
    }
    free(data->sequences);
    free(data->sizes);
}

int equal(int* s1, int size1, int* s2, int size2) {
    if (size1 != size2) return 0;
    for (int i = 0; i < size1; i++) {
        if (s1[i] != s2[i]) return 0;
    }
    return 1;
}

int earlier(int* s1, int size1, int* s2, int size2) {
    if (size1 != size2) return 0;
    for (int i = 0; i < size1; i++) {
        if (s1[i] > s2[i]) return 0;
    }
    return 1;
}

void filter(SequenceData* data, int pos, int value) {
    for (int i = 0; i < data->n; i++) {
        if (pos < data->sizes[i] && data->sequences[i][pos] == value) {
            for (int j = 0; j < data->sizes[i]; j++) {
                printf("%d ", data->sequences[i][j]);
            }
            printf("\n");
        }
    }
}

void print_mask_cols(SequenceData* collection, int* mask, int m) {
    for (int i = 0; i < collection->n; i++) {
        int first = 1; // Flaga do zarządzania spacjami
        for (int j = 0; j < m; j++) {
            if (mask[j] == 1 && j < collection->sizes[i]) {
                if (!first) {
                    printf(" ");
                }
                printf("%d", collection->sequences[i][j]);
                first = 0; // Po pierwszym elemencie dodawaj spacje
            }
        }
        printf("\n");
    }
}

void print_mask_rows(SequenceData* collection, int* mask) {
    for (int i = 0; i < collection->n; i++) {
        if (mask[i] == 1) {
            for (int j = 0; j < collection->sizes[i]; j++) {
                printf("%d ", collection->sequences[i][j]);
            }
            printf("\n");
        }
    }
}

void seq_most_oft(SequenceData* collection) {
    int max_count = 0;
    int max_index = 0;

    for (int i = 0; i < collection->n; i++) {
        int count = 0;
        for (int j = 0; j < collection->n; j++) {
            if (equal(collection->sequences[i], collection->sizes[i], collection->sequences[j], collection->sizes[j])) {
                count++;
            }
        }
        if (count > max_count) {
            max_count = count;
            max_index = i;
        }
    }

    for (int j = 0; j < collection->sizes[max_index]; j++) {
        printf("%d ", collection->sequences[max_index][j]);
    }
    printf("\n");
}

int main() {
    SequenceData collection;
    char command[50];
    int* mask;

    while (1) {
        scanf("%s", command);

        if (strcmp(command, "INIT") == 0) {
            int n, m;
            scanf("%d %d", &n, &m);

            collection.n = n;
            collection.sequences = (int**)malloc(n * sizeof(int*));
            collection.sizes = (int*)malloc(n * sizeof(int));

            for (int i = 0; i < n; i++) {
                collection.sizes[i] = m;
                collection.sequences[i] = (int*)malloc(m * sizeof(int));
                for (int j = 0; j < m; j++) {
                    scanf("%d", &collection.sequences[i][j]);
                }
            }
        }
        else if (strcmp(command, "EQUAL") == 0) {
            int i, j;
            scanf("%d %d", &i, &j);
            printf("%d\n", equal(collection.sequences[i], collection.sizes[i], collection.sequences[j], collection.sizes[j]));
        }
        else if (strcmp(command, "EARLIER") == 0) {
            int i, j;
            scanf("%d %d", &i, &j);
            printf("%d\n", earlier(collection.sequences[i], collection.sizes[i], collection.sequences[j], collection.sizes[j]));
        }
        else if (strcmp(command, "FILTER_SIMPLE") == 0) {
            int pos, value;
            scanf("%d %d", &pos, &value);
            filter(&collection, pos, value);
        }
        else if (strcmp(command, "P_MASK_COLS") == 0) {
            int m = collection.sizes[0];
            mask = (int*)malloc(m * sizeof(int));
            for (int i = 0; i < m; i++) {
                scanf("%d", &mask[i]);
            }
            print_mask_cols(&collection, mask, m);
            free(mask);
        }
        else if (strcmp(command, "P_MASK_ROWS") == 0) {
            mask = (int*)malloc(collection.n * sizeof(int));
            for (int i = 0; i < collection.n; i++) {
                scanf("%d", &mask[i]);
            }
            print_mask_rows(&collection, mask);
            free(mask);
        }
        else if (strcmp(command, "SEQ_MOST_OFT") == 0) {
            seq_most_oft(&collection);
        }
        else if (strcmp(command, "END") == 0) {
            freeData(&collection);
            break;
        }
    }

    return 0;
}
